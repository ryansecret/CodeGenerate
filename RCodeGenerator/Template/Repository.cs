// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace RCodeGenerator.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class Repository : RepositoryBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UsingArea));
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 7 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    ");
            
            #line 9 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
var interfaceName=string.Format("I{0}Repository",TableName);
            
            #line default
            #line hidden
            this.Write("    public interface ");
            
            #line 10 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interfaceName));
            
            #line default
            #line hidden
            this.Write(" : IRepository<");
            
            #line 10 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 10 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeyType));
            
            #line default
            #line hidden
            this.Write(">\r\n    {\r\n      \r\n    }\r\n    public class  ");
            
            #line 14 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("Repository:");
            
            #line 14 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interfaceName));
            
            #line default
            #line hidden
            this.Write(", IDao\r\n    {  \r\n         ");
            
            #line 16 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
    if(IsKeyAutoIncreased) {
            
            #line default
            #line hidden
            this.Write("               private readonly EntityPropertyHelper<");
            
            #line 17 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("> _propertyHelper =\r\n            new EntityPropertyHelper<");
            
            #line 18 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(">();\r\n                ");
            
            #line 19 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
    }
            
            #line default
            #line hidden
            this.Write("       \r\n        public void Add(");
            
            #line 21 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" item)\r\n        {\r\n            using (var conn = Database.Open())\r\n            {\r" +
                    "\n                \r\n                var tuple = ");
            
            #line 26 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("Sql.Add(item);\r\n                ");
            
            #line 27 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
    if(IsKeyAutoIncreased) {
            
            #line default
            #line hidden
            this.Write("\r\n                var id = conn.ExecuteScalar<int>(tuple.Item1, (object) tuple.It" +
                    "em2);\r\n                _propertyHelper.SetValue(m => m.Id, item, id);\r\n\r\n       " +
                    "         ");
            
            #line 32 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
    }else{ 
            
            #line default
            #line hidden
            this.Write("\r\n                conn.Execute(tuple.Item1, (object) tuple.Item2);\r\n");
            
            #line 35 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
    } 
            
            #line default
            #line hidden
            this.Write("               \r\n            }\r\n        }\r\n\r\n         public void Update(");
            
            #line 40 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" item)\r\n         {\r\n            using (var con = Database.Open())\r\n            {\r" +
                    "\n                var tuple = ");
            
            #line 44 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("Sql.Update(item);\r\n                con.Execute(tuple.Item1, (object) tuple.Item2)" +
                    ";\r\n            }\r\n         }\r\n        public void Remove(");
            
            #line 48 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" item)\r\n        {\r\n            using (var con = Database.Open())\r\n            {\r\n" +
                    "                var tuple = ");
            
            #line 52 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("Sql.Remove(item.Id);\r\n                con.Execute(tuple.Item1, (object) tuple.Ite" +
                    "m2);\r\n            }\r\n        }\r\n        \r\n        public ");
            
            #line 57 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" FindBy(");
            
            #line 57 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeyType));
            
            #line default
            #line hidden
            this.Write(" key)\r\n        { \r\n            using (var con = Database.Open())\r\n            {\r\n" +
                    "                var tuple = ");
            
            #line 61 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("Sql.FindBy(key);\r\n\r\n                return\r\n                    con.Query< ");
            
            #line 64 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(">(tuple.Item1, (object) tuple.Item2)\r\n                        .FirstOrDefault();\r" +
                    "\n            }\r\n        }\r\n        public IEnumerable<");
            
            #line 68 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(@"> Select(Query query, out int totalRows)
        {
            if (query.PageIndex <= 0)
            {
                query.PageIndex = 1;
            }
            if (query.PageSize <= 0 )
            {
                query.PageSize = 100;
            }

            using (var conn = Database.Open())
            {

                var tuple = ");
            
            #line 82 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(@"Sql.Select(query);

                SqlMapper.GridReader reader = conn.QueryMultiple(tuple.Item1 + tuple.Item2, (object)tuple.Item3);

                var result = reader.Read<object>().First() as IDictionary<string, object>;
                totalRows = Convert.ToInt32(result[""Count""]);
                return reader.Read<");
            
            #line 88 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(">();\r\n            }  \r\n        }\r\n        public IList<");
            
            #line 91 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("> FindAll()\r\n        {\r\n            throw new NotImplementedException();\r\n       " +
                    " }\r\n         public void RemoveAll()\r\n        {\r\n             using (var con = D" +
                    "atabase.Open())\r\n            {\r\n                var sql = ");
            
            #line 99 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("Sql.RemoveAllSql();\r\n                con.Execute(sql );\r\n            }\r\n        }" +
                    "\r\n\r\n       \r\n    }\r\n   ");
            
            #line 106 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
    var columns= string.Join(",",ColumnInfos.Select(d=>d.Name));
         var columnsWithoutId=ColumnInfos.Where(c=>c.IsKey==0);
         var columnsWithoutIdText=string.Join(",",columnsWithoutId.Select(d=>d.Name));
         var columnsParams= string.Join(",",columnsWithoutId.Select(d=>"@"+d.Name));
   
            
            #line default
            #line hidden
            this.Write("    internal class ");
            
            #line 111 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("Sql\r\n    {\r\n        public static string BaseSelectSql()\r\n        {\r\n            " +
                    "return @\"SELECT ");
            
            #line 115 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columns));
            
            #line default
            #line hidden
            this.Write(" from ");
            
            #line 115 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" \";\r\n        }\r\n\r\n        public static Tuple<string, dynamic> FindBy(");
            
            #line 118 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeyType));
            
            #line default
            #line hidden
            this.Write(" id)\r\n        {\r\n            var sql = string.Join(\" \", BaseSelectSql(), \"WHERE\"," +
                    " \"id=@Id\");\r\n \r\n            return new Tuple<string, dynamic>(sql, new {Id = id}" +
                    ");\r\n        } \r\n\r\n        public static Tuple<string, dynamic> Add(");
            
            #line 125 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" item)\r\n        {\r\n            var sql =\r\n                @\"INSERT INTO ");
            
            #line 128 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 128 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnsWithoutIdText));
            
            #line default
            #line hidden
            this.Write(") VALUES (");
            
            #line 128 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnsParams));
            
            #line default
            #line hidden
            this.Write(");\";\r\n            ");
            
            #line 129 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
if(KeyType=="int") {
            
            #line default
            #line hidden
            this.Write("               sql+=\"SELECT LAST_INSERT_ID()\";\r\n            ");
            
            #line 131 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
}
            
            #line default
            #line hidden
            this.Write("             \r\n            return new Tuple<string, dynamic>(sql, ToDbModel(item)" +
                    ");\r\n        }\r\n \r\n        public static Tuple<string, dynamic> Update(");
            
            #line 136 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" item)\r\n        {\r\n            var sql =\r\n                @\"UPDATE ");
            
            #line 139 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" SET ");
            
            #line 139 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",columnsWithoutId.Select(d=>string.Format("{0}=@{0}",d.Name)))));
            
            #line default
            #line hidden
            this.Write("  WHERE Id=@Id\";\r\n            return new Tuple<string, dynamic>(sql, ToDbModel(it" +
                    "em));\r\n        }\r\n        public static string RemoveAllSql()\r\n        {\r\n      " +
                    "      return \"DELETE FROM ");
            
            #line 144 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("\";\r\n        }\r\n        public static Tuple<string, dynamic> Remove(");
            
            #line 146 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeyType));
            
            #line default
            #line hidden
            this.Write(@" id)
        {
            var sql = string.Join("" "", RemoveAllSql(), ""WHERE"", ""id=@Id"");

            return new Tuple<string, dynamic>(sql, new {Id = id});
        } 
         public static Tuple<string, string, dynamic> Select(Query query)
        {
            
            var builder = new SQLBuilder();
            var oper = ""and"";
            builder.AppendWhere();
            
            string selectsql = string.Join("" "", BaseSelectSql(),builder.Sql(), ""ORDER BY id DESC"", ""LIMIT @Limit OFFSET @Offset;"");
            string sqlcount =string.Format( ""SELECT COUNT(*) AS Count FROM ");
            
            #line 160 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(@"  {0};"",builder.Sql());
            return new Tuple<string, string, dynamic>(sqlcount, selectsql, new
            {
                Limit = query.PageSize,
                Offset = (query.PageIndex - 1) * query.PageSize,
               
            });
        }
        public static dynamic ToDbModel(");
            
            #line 168 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" item)\r\n        {\r\n            return new\r\n            {\r\n                ");
            
            #line 172 "C:\Users\ryan\Documents\Visual Studio 2013\Projects\CodeGenerate\RCodeGenerator\Template\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",ColumnInfos.Select(d=>"item."+d.Name))));
            
            #line default
            #line hidden
            this.Write(@"
            };
        }
    } 
     public class Query
    {
     
        public Int32 PageIndex;
        public Int32 PageSize;

        public Int32 Limit
        {
            get { return this.PageSize; }
        }

        public Int32 Offset
        {
            get { return (this.PageIndex - 1) * this.PageSize; }
        }
    }
}

");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class RepositoryBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
